
(* evm -> human readable *)
let show = function
  | EVM.Coq_evm_stop -> "STOP"
  | EVM.Coq_evm_add -> "ADD"
  | EVM.Coq_evm_mul -> "MUL"
  | EVM.Coq_evm_sub -> "SUB"
  | EVM.Coq_evm_div -> "DIV"
  | EVM.Coq_evm_sdiv -> "SDIV"
  | EVM.Coq_evm_mod -> "MOD"
  | EVM.Coq_evm_smod -> "SMOD"
  | EVM.Coq_evm_addmod -> "ADDMOD"
  | EVM.Coq_evm_mulmod -> "MULMOD"
  | EVM.Coq_evm_exp -> "EXP"
  | EVM.Coq_evm_signextend -> "SIGNEXTEND"
  | EVM.Coq_evm_lt -> "LT"
  | EVM.Coq_evm_gt -> "GT"
  | EVM.Coq_evm_slt -> "SLT"
  | EVM.Coq_evm_sgt -> "SGT"
  | EVM.Coq_evm_eq -> "EQ"
  | EVM.Coq_evm_iszero -> "ISZERO"
  | EVM.Coq_evm_and -> "AND"
  | EVM.Coq_evm_or -> "OR"
  | EVM.Coq_evm_xor -> "XOR"
  | EVM.Coq_evm_not -> "NOT"
  | EVM.Coq_evm_byte -> "BYTE"
  | EVM.Coq_evm_sha3 -> "SHA3"
  | EVM.Coq_evm_address -> "ADDRESS"
  | EVM.Coq_evm_balance -> "BALANCE"
  | EVM.Coq_evm_origin -> "ORIGIN"
  | EVM.Coq_evm_caller -> "CALLER"
  | EVM.Coq_evm_callvalue -> "CALLVALUE"
  | EVM.Coq_evm_calldataload -> "CALLDATALOAD"
  | EVM.Coq_evm_calldatasize -> "CALLDATASIZE"
  | EVM.Coq_evm_codesize -> "CODESIZE"
  | EVM.Coq_evm_gasprice -> "GASPRICE"
  | EVM.Coq_evm_extcodesize -> "EXTCODESIZE"
  | EVM.Coq_evm_blockhash -> "BLOCKHASH"
  | EVM.Coq_evm_coinbase -> "COINBASE"
  | EVM.Coq_evm_timestamp -> "TIMESTAMP"
  | EVM.Coq_evm_number -> "NUMBER"
  | EVM.Coq_evm_difficulty -> "DIFFICULTY"
  | EVM.Coq_evm_gaslimit -> "GASLIMIT"
  | EVM.Coq_evm_gas -> "GAS"
  | EVM.Coq_evm_codecopy -> "CODECOPY"
  | EVM.Coq_evm_pop -> "POP"
  | EVM.Coq_evm_mload -> "MLOAD"
  | EVM.Coq_evm_mstore -> "MSTORE"
  | EVM.Coq_evm_mstore8 -> "MSTORE8"
  | EVM.Coq_evm_sload -> "SLOAD"
  | EVM.Coq_evm_sstore -> "SSTORE"
  | EVM.Coq_evm_jump -> "JUMP"
  | EVM.Coq_evm_jumpi -> "JUMPI"
  | EVM.Coq_evm_label l -> Printf.sprintf "%-16s %s" "LABEL" (BinNumsExt.show_pos l)
  | EVM.Coq_evm_push x -> Printf.sprintf "%-16s %s" "PUSH" (BinNumsExt.show_int x)
  | EVM.Coq_evm_push_label l -> Printf.sprintf "%-16s %s" "PUSH_LABEL" (BinNumsExt.show_pos l)
  | EVM.Coq_evm_dup n -> Printf.sprintf "DUP N%d" (DatatypesExt.eval_nat n)
  | EVM.Coq_evm_swap n -> Printf.sprintf "SWAP N%d" (DatatypesExt.eval_nat n)
  | EVM.Coq_evm_call -> "CALL"
  | EVM.Coq_evm_revert -> "REVERT"
  | EVM.Coq_evm_return -> "RETURN"
  | EVM.Coq_evm_log -> "LOG"
